Index: app/src/main/java/com/example/weatherornot/SearchPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weatherornot;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Intent;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.EditText;\r\nimport android.widget.Toast;\r\n\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.fragment.app.FragmentTransaction;\r\n\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONObject;\r\nimport org.json.JSONException;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport fr.arnaudguyon.xmltojsonlib.XmlToJson;\r\n\r\npublic class SearchPage extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {\r\n    DrawerLayout drawerLayout;\r\n    NavigationView navigationView;\r\n    Toolbar toolbar;\r\n    FragmentManager fragmentManager;\r\n    EditText stopNumber, routeNumber;\r\n\r\n    private final String ESTIMATES_URL = \"https://api.translink.ca/rttiapi/v1/stops\";\r\n    private final String APP_ID = \"H6I5JajNoTKkm7Ub2Wj0\";\r\n\r\n    boolean finishedSearch = false;\r\n    private final ArrayList<String> busesDestination = new ArrayList<>();\r\n    private final ArrayList<String> busesTime = new ArrayList<>();\r\n    private final ArrayList<String> busPattern = new ArrayList<>();\r\n    private final ArrayList<String> busLastUpdate = new ArrayList<>();\r\n//    private ArrayList<String> busDirection = new ArrayList<>();\r\n\r\n\r\n    FirebaseAuth firebaseAuth;\r\n\r\n    public final static String DEBUG_TAG = \"SearchPageDebug\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_search_page);\r\n\r\n\r\n        fragmentManager = getSupportFragmentManager();\r\n\r\n        Fragment fruit = new SearchFragment();\r\n        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\r\n        fragmentTransaction.replace(R.id.ctnFragment, fruit);\r\n        fragmentTransaction.commit();\r\n\r\n        drawerLayout = findViewById(R.id.drawer_layout);\r\n        navigationView = findViewById(R.id.nav_view);\r\n        toolbar = findViewById(R.id.toolbar);\r\n\r\n        setSupportActionBar(toolbar);\r\n\r\n        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);\r\n        drawerLayout.addDrawerListener(toggle);\r\n        toggle.syncState();\r\n\r\n        navigationView.setNavigationItemSelectedListener(this);\r\n    }\r\n\r\n    /**\r\n     * Button handler for search button.\r\n     */\r\n    public void searchButtonHandler(View view) {\r\n//        final Intent res = new Intent(this, MapsActivity.class);\r\n//        startActivity(res);\r\n        uploadSearchQueryToFireBase();\r\n        getBuses();\r\n    }\r\n\r\n    /**\r\n     * for \"SEE MAP\" Button, go to google map API\r\n     *\r\n     * @param view Current view.\r\n     */\r\n    public void go_to_map(View view) {\r\n        final Intent toMap = new Intent(this, GoogleMap.class);\r\n        startActivity(toMap);\r\n    }\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n        switch (item.getItemId()) {\r\n            case R.id.nav_home:\r\n                Fragment fruit = new SearchFragment();\r\n                FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\r\n                fragmentTransaction.replace(R.id.ctnFragment, fruit);\r\n                fragmentTransaction.commit();\r\n                break;\r\n            case R.id.nav_cycle:\r\n                final Intent loginPage = new Intent(this, MainActivity.class);\r\n                startActivity(loginPage);\r\n                break;\r\n            case R.id.nav_bus:\r\n                FirebaseAuth.getInstance().signOut();\r\n                final Intent logoutPage = new Intent(this, MainActivity.class);\r\n                startActivity(logoutPage);\r\n                break;\r\n            default:\r\n        }\r\n        drawerLayout.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n\r\n    public void BackToSearch(View view) {\r\n        Toast.makeText(this, \"Back\", Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    private void getBuses() {\r\n        // TextViews.\r\n        stopNumber = findViewById(R.id.searchPageStopNumber);\r\n        routeNumber = findViewById(R.id.searchPageRouteNumber);\r\n\r\n        // 53987\r\n\r\n        String tempURL = \"\";\r\n        String stopNo  = stopNumber.getText().toString().trim();\r\n        String routeNo = routeNumber.getText().toString().trim();\r\n\r\n        // Error messages.\r\n        final String errorMSGStop = \"Please enter a valid stop number.\";\r\n        final String errorMSGRoute = \"Please enter a valid route number.\";\r\n\r\n        // Error checking for STOPS.\r\n        if (!stopNumber.getText().toString().isEmpty() && !routeNumber.getText().toString().isEmpty()) {\r\n            // If the search term is not a valid integer, exit function with message.\r\n            try {\r\n                Integer.parseInt(stopNo);\r\n                //Integer.parseInt(routeNo);\r\n                // SUCCESS: The search term is a valid integer.\r\n                // Set the tempURL and proceed.\r\n                // https://api.translink.ca/rttiapi/v1/stops/60980/estimates\r\n                tempURL = ESTIMATES_URL + \"/\" + stopNo + \"/estimates?apikey=\" + APP_ID + \"&routeNo=\" + routeNo;\r\n            } catch (NumberFormatException e) {\r\n                // FAILURE: The search term is not a valid integer.\r\n                final Toast t = Toast.makeText(getApplicationContext(), errorMSGStop, Toast.LENGTH_LONG);\r\n                t.show();\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Error checking for ROUTES.\r\n        else if (!stopNumber.getText().toString().isEmpty() && routeNumber.getText().toString().isEmpty()) {\r\n            // If the search term is not a valid integer, exit function with message.\r\n            try {\r\n                Integer.parseInt(stopNo);\r\n                // SUCCESS: The search term is a valid integer.\r\n                // Set the tempURL and proceed.\r\n                tempURL = ESTIMATES_URL + \"/\" + stopNo + \"/estimates?apikey=\" + APP_ID;\r\n            } catch (NumberFormatException e) {\r\n                // FAILURE: The search term is not a valid integer.\r\n                final Toast t = Toast.makeText(getApplicationContext(), errorMSGRoute, Toast.LENGTH_LONG);\r\n                t.show();\r\n                return;\r\n            }\r\n        }\r\n\r\n        AsyncTaskRunner runner = new AsyncTaskRunner();\r\n        runner.execute(tempURL);\r\n\r\n    }\r\n\r\n    /**\r\n     * If the user is logged in,\r\n     * uploads the user's search query\r\n     * onto the realtime database search history.\r\n     */\r\n    private void uploadSearchQueryToFireBase() {\r\n        Log.d(DEBUG_TAG, \"Running: uploadSearchQueryToFireBase()\");\r\n\r\n        // If the user is logged in, upload their query into the realtime database.\r\n        // Else, do nothing.\r\n        firebaseAuth = FirebaseAuth.getInstance();\r\n        final FirebaseUser user = firebaseAuth.getCurrentUser();\r\n        if (user != null) {\r\n            Log.d(DEBUG_TAG, \"User is logged in. Saving search query...\");\r\n            DatabaseReference db = FirebaseDatabase.getInstance().getReference();\r\n\r\n            // Keys for the database.\r\n            final String USERS_KEY = \"users\";\r\n            final String SEARCH_HISTORY_KEY = \"search_history\";\r\n\r\n            // The search query.\r\n            final String SEARCH_QUERY = \"\";\r\n\r\n            // Push to the Firebase Realtime Database.\r\n            db\r\n                    .child(USERS_KEY) // The \"users\" tree.\r\n                    .child(user.getUid()) // The user UID.\r\n                    .child(SEARCH_HISTORY_KEY) // The \"search_history\" tree.\r\n                    .push();\r\n\r\n            Log.d(DEBUG_TAG, \"Search query saved.\");\r\n        }\r\n\r\n        Log.d(DEBUG_TAG, \"User is not logged in. Exiting function...\");\r\n\r\n    }\r\n\r\n    private class AsyncTaskRunner extends AsyncTask<String, Void, String> {\r\n        @Override\r\n        protected String doInBackground(String... strings) {\r\n\r\n            RequestQueue queue = Volley.newRequestQueue(SearchPage.this);\r\n            StringRequest stringRequest = new StringRequest(Request.Method.GET, strings[0],\r\n                    response -> {\r\n                        try {\r\n                            XmlToJson xmlToJson = new XmlToJson.Builder(response).build();\r\n                            JSONObject jsonObject = xmlToJson.toJson();\r\n                            Log.d(\"resp\", String.valueOf(jsonObject));\r\n\r\n                            JSONObject busesObj = jsonObject.getJSONObject(\"NextBuses\");\r\n                            JSONObject nextBusObj = busesObj.getJSONObject(\"NextBus\");\r\n                            JSONObject schedulesObj = nextBusObj.getJSONObject(\"Schedules\");\r\n                            JSONArray busScheduleObj = schedulesObj.getJSONArray(\"Schedule\");\r\n\r\n                            for (int i = 0; i < busScheduleObj.length(); i++) {\r\n                                System.out.println(\"for loop\");\r\n                                String destination = busScheduleObj.getJSONObject(i).getString(\"Destination\");\r\n                                String expectedLeaveTime = busScheduleObj.getJSONObject(i).getString(\"ExpectedLeaveTime\");\r\n                                String lastTimeUpdate = busScheduleObj.getJSONObject(i).getString(\"LastUpdate\");\r\n                                String pattern = busScheduleObj.getJSONObject(i).getString(\"Pattern\");\r\n//                                String routeNo = busScheduleObj.getJSONObject(i).getString(\"RouteNo\");\r\n//                                String direction = busScheduleObj.getJSONObject(i).getString(\"Direction\");\r\n                                busesDestination.add(destination);\r\n                                busesTime.add(expectedLeaveTime);\r\n                                busPattern.add(pattern);\r\n                                busLastUpdate.add(lastTimeUpdate);\r\n//                                busDirection.add(direction);\r\n                            }\r\n                            Bundle bundle = new Bundle();\r\n                            bundle.putStringArrayList(\"Destination\", busesDestination);\r\n                            bundle.putStringArrayList(\"Times\", busesTime);\r\n                            bundle.putStringArrayList(\"Pattern\", busPattern);\r\n                            bundle.putStringArrayList(\"LastUpdate\", busLastUpdate);\r\n//                            bundle.putStringArrayList(\"Direction\", busDirection);\r\n                            Fragment results = new ResultsFragment();\r\n                            results.setArguments(bundle);\r\n                            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\r\n                            fragmentTransaction.replace(R.id.ctnFragment, results);\r\n                            fragmentTransaction.commit();\r\n//                            searchButtonHandler();\r\n//                            Log.d(\"resp\", direction);\r\n//                            Log.d(\"resp\", destination);\r\n//                            Log.d(\"resp\", pattern);\r\n//                            Log.d(\"resp\", routeNo);\r\n//                            Log.d(\"resp\", String.valueOf(vehicleNo));\r\n//                            textView.setText(\"Bus details: \" +\r\n//                                    \"\\nDirection: \" + direction\r\n//                                    + \"\\nDestination: \" +destination\r\n//                                    + \"\\nBus Pattern: \" + pattern\r\n//                                    + \"\\nBus Route number: \" + routeNo\r\n//                                    + \"\\nBus Vehicle number: \"+ vehicleNo);\r\n                            finishedSearch = true;\r\n                        } catch (JSONException e) {\r\n                            e.getMessage();\r\n                        }\r\n                    }, error -> Log.d(\"resp\", \"hello\"));\r\n\r\n            queue.add(stringRequest);\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(String bitmap) {\r\n            //super.onPostExecute(bitmap);\r\n\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/weatherornot/SearchPage.java b/app/src/main/java/com/example/weatherornot/SearchPage.java
--- a/app/src/main/java/com/example/weatherornot/SearchPage.java	(revision eb1aba18bd30c9abe97d015a6731fe5d27f85a8c)
+++ b/app/src/main/java/com/example/weatherornot/SearchPage.java	(date 1669064956297)
@@ -61,6 +61,9 @@
 
     public final static String DEBUG_TAG = "SearchPageDebug";
 
+    /** The text typed into either one of the search bars. */
+    private String search_query;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -160,6 +163,7 @@
                 // SUCCESS: The search term is a valid integer.
                 // Set the tempURL and proceed.
                 // https://api.translink.ca/rttiapi/v1/stops/60980/estimates
+                search_query = stopNo;
                 tempURL = ESTIMATES_URL + "/" + stopNo + "/estimates?apikey=" + APP_ID + "&routeNo=" + routeNo;
             } catch (NumberFormatException e) {
                 // FAILURE: The search term is not a valid integer.
@@ -170,13 +174,14 @@
         }
 
         // Error checking for ROUTES.
-        else if (!stopNumber.getText().toString().isEmpty() && routeNumber.getText().toString().isEmpty()) {
+        else if (!routeNumber.getText().toString().isEmpty() && routeNumber.getText().toString().isEmpty()) {
             // If the search term is not a valid integer, exit function with message.
             try {
-                Integer.parseInt(stopNo);
+                Integer.parseInt(routeNo);
                 // SUCCESS: The search term is a valid integer.
                 // Set the tempURL and proceed.
-                tempURL = ESTIMATES_URL + "/" + stopNo + "/estimates?apikey=" + APP_ID;
+                search_query = routeNo;
+                tempURL = ESTIMATES_URL + "/" + routeNo + "/estimates?apikey=" + APP_ID;
             } catch (NumberFormatException e) {
                 // FAILURE: The search term is not a valid integer.
                 final Toast t = Toast.makeText(getApplicationContext(), errorMSGRoute, Toast.LENGTH_LONG);
@@ -203,27 +208,24 @@
         firebaseAuth = FirebaseAuth.getInstance();
         final FirebaseUser user = firebaseAuth.getCurrentUser();
         if (user != null) {
-            Log.d(DEBUG_TAG, "User is logged in. Saving search query...");
-            DatabaseReference db = FirebaseDatabase.getInstance().getReference();
+            final String emailMSG = "User" + user.getEmail() + " is logged in. Saving search query...";
+            Log.d(DEBUG_TAG, emailMSG);
+            FirebaseDatabase database = FirebaseDatabase.getInstance();
 
             // Keys for the database.
             final String USERS_KEY = "users";
             final String SEARCH_HISTORY_KEY = "search_history";
 
-            // The search query.
-            final String SEARCH_QUERY = "";
-
             // Push to the Firebase Realtime Database.
-            db
-                    .child(USERS_KEY) // The "users" tree.
-                    .child(user.getUid()) // The user UID.
-                    .child(SEARCH_HISTORY_KEY) // The "search_history" tree.
-                    .push();
+            DatabaseReference myRef = database.getReference("test");
+            myRef.setValue(search_query);
 
-            Log.d(DEBUG_TAG, "Search query saved.");
-        }
 
-        Log.d(DEBUG_TAG, "User is not logged in. Exiting function...");
+            final String msg = "Search query saved: " + search_query;
+            Log.d(DEBUG_TAG, msg);
+        } else {
+            Log.d(DEBUG_TAG, "User is not logged in. Exiting function...");
+        }
 
     }
 
